{"mappings":"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","sources":["src/OSDMeasure.js"],"sourcesContent":["/**\r\n * DexieWrapper.js\r\n *\r\n * Database wrapper that helps access data via the plugin\r\n *\r\n * By Nicholas Verrochi and Vidhya Sree N\r\n */\r\n\r\nclass DexieWrapper {\r\n\r\n    db; // Dexie.js object to access the database\r\n    plugin; // reference to the plugin\r\n\r\n    /**\r\n     * constructor\r\n     *\r\n     * Opens the database, will work whether it exists already or not\r\n     *\r\n     * @param {OSDMeasure} plugin\r\n     */\r\n    constructor(plugin) {\r\n        this.plugin = plugin;\r\n        this.db = new Dexie(\"database\");\r\n        this.db.version(3).stores({\r\n            measurements: `\r\n                id,\r\n                image,\r\n                p1x, p1y,\r\n                p2x, p2y,\r\n                name,\r\n                color`\r\n        });\r\n        this.db.open();\r\n    }\r\n\r\n    /**\r\n     * clear:\r\n     *\r\n     * Removes all entries from the database\r\n     */\r\n    clear() {\r\n        this.db.measurements.clear();\r\n    }\r\n\r\n    /**\r\n     * getAllMeasurements:\r\n     *\r\n     * Gets all the measurements from the database\r\n     *\r\n     * @returns a list of all stored measurements\r\n     */\r\n    async getAllMeasurements(imageIdentifier) {\r\n        let measurements = [];\r\n        // query all measurements related to the image\r\n        let result = await this.db.measurements.where(\"image\").equals(imageIdentifier).toArray();\r\n        for (let i = 0; i < result.length; i++) {\r\n            let measurement = new Measurement(\r\n                new Point(result[i].p1x, result[i].p1y, result[i].color, this.plugin.fabricCanvas , this.imageIdentifier),\r\n                new Point(result[i].p2x, result[i].p2y, result[i].color, this.plugin.fabricCanvas , this.imageIdentifier),\r\n                result[i].name, result[i].color, this.plugin.conversionFactor, this.plugin.units, this.plugin.fabricCanvas ,this.imageIdentifier\r\n            );\r\n            measurement.id = result[i].id;\r\n            measurements.push(measurement);\r\n        }\r\n        return measurements;\r\n    }\r\n\r\n    /**\r\n     * removeMeasurement:\r\n     *\r\n     * Removes the measurement passed in from the database\r\n     *\r\n     * @param {Measurement} measurement\r\n     */\r\n    async removeMeasurement(measurement,imageIdentifier) {\r\n        await this.db.measurements.delete(measurement.id,imageIdentifier);\r\n    }\r\n\r\n    /**\r\n     * saveAll:\r\n     *\r\n     * Saves an entire list of measurements\r\n     *\r\n     * @param {Measurement []} measurements\r\n     */\r\n    saveAll(measurements,imageIdentifier) {\r\n        for (let i = 0; i < measurements.length; i++) {\r\n            this.saveMeasurement(measurements[i],imageIdentifier);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * saveMeasurement:\r\n     *\r\n     * Saves a measurement into the database\r\n     * Measurements that already exist are replaced with their new versions\r\n     *\r\n     * @param {Measurement} measurement: the measurement object to store\r\n     */\r\n    saveMeasurement(measurement,imageIdentifier) {\r\n        this.db.measurements.put({\r\n            id: measurement.id,\r\n            image: imageIdentifier,\r\n            p1x: measurement.p1.x,\r\n            p1y: measurement.p1.y,\r\n            p2x: measurement.p2.x,\r\n            p2y: measurement.p2.y,\r\n            name: measurement.name,\r\n            color: measurement.color\r\n        });\r\n    }\r\n}\r\n\r\n/*\r\n * OSDMeasure.js\r\n *\r\n * Plugin for OpenSeadragon that allows for measuring\r\n *\r\n * By Nicholas Verrochi and Vidhya Sree N\r\n *\r\n * Requires OpenSeadragon, Fabric.js, and\r\n * the OpenSeadragon Fabric.js Overlay plugin\r\n */\r\n\r\nclass OSDMeasure {\r\n\r\n    /**\r\n     * APIs used by the plugin\r\n     */\r\n    viewer; // the OpenSeadragon viewer\r\n    overlay; // the fabric.js overlay, contains the canvas\r\n    fabricCanvas; // the fabric.js canvas to draw shapes on\r\n    db; // DexieWrapper to access the database\r\n\r\n    /**\r\n     * Flags\r\n     */\r\n    isMeasuring; // flag to indicate when user is mid-measurement (one point marked)\r\n    useBuiltInUI; // when true, will setup the built-in UI after starting\r\n\r\n    /**\r\n     * Data\r\n     */\r\n    measurements; // holds measurements taken in an array\r\n    p1; // start point of the measurement\r\n    p2; // end point of the measurement\r\n    redoStack; // populated upon undo - this way the user can go back again\r\n\r\n    /**\r\n     * Customization options\r\n     */\r\n    conversionFactor; // factor to multiply for converting from pixels\r\n    measurementColor; // color to render measurement markings\r\n    menuOptions; // options object to be passed to the built-in UI if used\r\n    units; // string to indicate what units are used, for example \"um\"\r\n    imageIdentifier;\r\n    measurementIdCounter;\r\n    /**\r\n     * constructor\r\n     *\r\n     * Sets up the viewer by starting a fabric.js overlay and wiring callbacks\r\n     *\r\n     * @param {OpenSeadragon} viewer: the OpenSeadragon viewer\r\n     * @param {Object} options: object used to customize settings\r\n     */\r\n    constructor(viewer, options = {}) {\r\n        this.viewer = viewer;\r\n\r\n        this.processOptions(options);\r\n\r\n        // pull in the two libraries\r\n        this.overlay = viewer.fabricjsOverlay();\r\n        this.fabricCanvas = this.overlay.fabricCanvas();\r\n        this.viewer.gestureSettingsMouse.clickToZoom = false;\r\n        this.viewer.gestureSettingsTouch.clickToZoom = false;\r\n        this.isMeasuring = false; // toggles when user places first point of a measurement\r\n\r\n        // the two points used to measure - these are image coordinates\r\n        this.p1 = null;\r\n        this.p2 = null;\r\n\r\n        // store all the measurements (and extraneous points)\r\n        this.measurements = [];\r\n        // temporarily stores undone measurements\r\n        this.redoStack = [];\r\n\r\n        // initialize databasse\r\n        this.db = new DexieWrapper(this);\r\n\r\n        this.imageIdentifier = this.viewer.tileSources[this.viewer.currentPage()];\r\n\r\n        this.viewer.addHandler('page', (event) => {\r\n                this.updateImageIdentifier(event);\r\n                this.clearCanvas();\r\n                this.loadFromLocalStorage(this.imageIdentifier);\r\n        });\r\n\r\n        // add our custom handler for measurements\r\n        this.viewer.addHandler('canvas-double-click', (event) => {\r\n            this.addMeasurement(event);\r\n            if (!event.quick) {\r\n                event.preventDefaultAction = true;\r\n            }\r\n        });\r\n\r\n        // re-render on page event (change in zoom)\r\n        this.viewer.addHandler('zoom', this.adjustToZoom.bind(this));\r\n\r\n        // re-render on rotation\r\n        this.viewer.addHandler('rotate', () => {\r\n            this.viewer.viewport.rotateTo(0);\r\n        })\r\n\r\n        // dispatch correct method on key press\r\n        document.addEventListener('keydown', (event) => {\r\n            this.handleKeyPress(event);\r\n        });\r\n\r\n        this.loadFromLocalStorage();\r\n         this.measurementIdCounter = 0;\r\n    }\r\n\r\n    updateImageIdentifier(event){\r\n        this.imageIdentifier = this.viewer.tileSources[this.viewer.currentPage()];\r\n    }\r\n\r\n    clearCanvas(){\r\n        this.fabricCanvas.clear();\r\n        for (let i = 0; i < this.measurements.length; i++) {\r\n          this.measurements[i].remove();\r\n        }\r\n        this.measurements = [];\r\n        this.redoStack = [];\r\n        if (this.isMeasuring) {\r\n          this.p1.remove();\r\n        }\r\n        this.p1 = null;\r\n        this.p2 = null;\r\n        this.isMeasuring = false;\r\n        document.dispatchEvent(new Event(\"measurements-reset\"));\r\n    }\r\n    /*\r\n     * addMeasurement:\r\n     *     Only called in measuring mode - places a new point onto the canvas,\r\n     *     and performs measuring once two points have been placed.\r\n     */\r\n    addMeasurement(event) {\r\n        let webPoint = event.position;\r\n        let viewportPoint = this.viewer.viewport.pointFromPixel(webPoint);\r\n        let imagePoint = this.viewer.viewport.viewportToImageCoordinates(viewportPoint);\r\n        let zoom = this.viewer.viewport.getZoom();\r\n\r\n        if (this.isMeasuring) { // already have a point, so complete the measurement\r\n            this.p2 = new Point(imagePoint.x, imagePoint.y, this.measurementColor, this.fabricCanvas , this.imageIdentifier);\r\n            this.p2.render(zoom);\r\n            let measurement = new Measurement(\r\n                this.p1, this.p2,\r\n                `M${this.measurements.length + 1}`,\r\n                this.measurementColor, this.conversionFactor, this.units, this.fabricCanvas ,this.imageIdentifier\r\n            );\r\n            measurement.render(zoom);\r\n            this.measurements.push(measurement);\r\n            measurement.id = this.measurementIdCounter++;\r\n            measurement.imageIdentifier = this.imageIdentifier;\r\n            this.saveInLocalStorage(this.imageIdentifier);\r\n            // dispatch an event to let it be known there is a new measurement\r\n            document.dispatchEvent(new Event(\"measurement-added\"));\r\n        } else { // place the first point\r\n            this.p1 = new Point(imagePoint.x, imagePoint.y, this.measurementColor, this.fabricCanvas ,this.imageIdentifier);\r\n            this.p1.render(zoom);\r\n        }\r\n        // have to blow out the redo stack since we made a new measurement\r\n        this.redoStack = [];\r\n        this.isMeasuring = !this.isMeasuring;\r\n    }\r\n\r\n    /**\r\n     * adjustToZoom:\r\n     *\r\n     * Adjusts the sizes of all fabric.js objects based on zoom\r\n     */\r\n    adjustToZoom() {\r\n        let zoom = this.viewer.viewport.getZoom();\r\n        for (let i = 0; i < this.measurements.length; i++) {\r\n            this.measurements[i].adjustToZoom(zoom);\r\n        }\r\n        if (this.p1 != null) {\r\n            this.p1.adjustToZoom(zoom);\r\n        }\r\n        if (this.p2 != null) {\r\n            this.p2.adjustToZoom(zoom);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * clear:\r\n     *     Erases all saved data relevant to this specific image from\r\n     *     localStorage and clears fabric objects and measurement data.\r\n     */\r\n    clear() {\r\n        this.db.clear();\r\n        for (let i = 0; i < this.measurements.length; i++) {\r\n            this.measurements[i].remove();\r\n        }\r\n        this.measurements = [];\r\n        this.redoStack = [];\r\n        if (this.isMeasuring) {\r\n            this.p1.remove();\r\n        }\r\n        this.p1 = null;\r\n        this.p2 = null;\r\n        this.isMeasuring = false;\r\n        document.dispatchEvent(new Event(\"measurements-reset\"));\r\n    }\r\n\r\n    /**\r\n     * exportCSV:\r\n     *     creates a CSV containing the measurement data\r\n     */\r\n    exportCSV() {\r\n        let header = [\"Name\", \"Point 1 X\", \"Point 1 Y\", \"Point 2 X\", \"Point 2 Y\", \"Distance\"];\r\n        let createRow = (measurement) => {\r\n            return [\r\n                measurement.name,\r\n                measurement.p1.x,\r\n                measurement.p1.y,\r\n                measurement.p2.x,\r\n                measurement.p2.y,\r\n                measurement.distance\r\n            ];\r\n        };\r\n        // generate the rows\r\n        let rows = [header];\r\n        for (let i = 0; i < this.measurements.length; i++) {\r\n            rows.push(createRow(this.measurements[i]));\r\n        }\r\n        // join the rows together\r\n        let csv = \"data:text/csv;charset=utf-8,\" + rows.map((row) => row.join(\",\")).join(\"\\n\");\r\n        // encode to URI\r\n        let uri = encodeURI(csv);\r\n        // download using invisible link trick\r\n        let link = document.createElement(\"a\");\r\n        link.setAttribute(\"href\", uri);\r\n        link.setAttribute(\"download\", \"measurements.csv\");\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        // clean up\r\n        document.body.removeChild(link);\r\n    }\r\n\r\n    /**\r\n     * handleKeyPress:\r\n     *\r\n     * Handles keyboard shortcuts\r\n     */\r\n    handleKeyPress(event) {\r\n        // reset\r\n        if (event.ctrlKey && event.key == 'r') {\r\n            if (window.confirm(\"Are you sure you want to reset all measurements and annotations?\")) {\r\n                this.clear();\r\n            }\r\n        }\r\n        // undo\r\n        else if (event.ctrlKey && event.key == 'z') {\r\n            this.undo();\r\n        }\r\n        // redo\r\n        else if (event.ctrlKey && event.key == 'y') {\r\n            this.redo();\r\n        }\r\n        // export csv\r\n        else if (event.ctrlKey && event.key == 's') {\r\n            this.exportCSV();\r\n        }\r\n        // override ctrl presses\r\n        if (event.ctrlKey) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * loadFromLocalStorage:\r\n     *     Loads any existing measurements from localStorage\r\n     */\r\n    async loadFromLocalStorage(imageIdentifier) {\r\n        this.measurements = await this.db.getAllMeasurements(this.imageIdentifier);\r\n        this.setMeasurementColor(localStorage.getItem(\"color\"));\r\n        document.dispatchEvent(new Event(\"data-loaded\"));\r\n        // render the measurements\r\n        this.renderAllMeasurements();\r\n    }\r\n\r\n    /**\r\n     * processOptions:\r\n     *\r\n     * Stores customization options in the object proper\r\n     * Loads the built-in UI if chosen for use\r\n     *\r\n     * @param {Object} options\r\n     */\r\n    processOptions(options) {\r\n        if (options.conversionFactor) {\r\n            this.conversionFactor = options.conversionFactor;\r\n        }\r\n        else {\r\n            this.conversionFactor = 1;\r\n        }\r\n\r\n        if (options.units) {\r\n            this.units = options.units;\r\n        }\r\n        else {\r\n            this.units = \"px\";\r\n        }\r\n\r\n        if (options.measurementColor) {\r\n            this.measurementColor = options.measurementColor;\r\n        }\r\n        else {\r\n            this.measurementColor = \"#000000\"\r\n        }\r\n\r\n        if (options.useBuiltInUI) {\r\n            let ui = new UI(this);\r\n            ui.addToDocument();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * redo:\r\n     *     replaces the last undone measurement or point if there are any in the stack\r\n     */\r\n    redo() {\r\n        if (this.redoStack.length > 0) {\r\n            let lastObject = this.redoStack.pop();\r\n            // get zoom level for rendering\r\n            let zoom = this.viewer.viewport.getZoom();\r\n            // if it's a point, handle it as such\r\n            if (lastObject instanceof Point) {\r\n                this.p1 = lastObject;\r\n                this.p1.render(zoom);\r\n                // set isMeasuring so the next double-click finishes the measurement\r\n                this.isMeasuring = true;\r\n            }\r\n            else { // it's a measurement\r\n                this.measurements.push(lastObject);\r\n                lastObject.id = this.measurements.length - 1;\r\n                lastObject.p1.render(zoom);\r\n                lastObject.p2.render(zoom);\r\n                lastObject.render(zoom);\r\n                // can't forget to save!\r\n                this.saveInLocalStorage(this.imageIdentifier);\r\n                // dispatch event to replace it in the measurement list\r\n                document.dispatchEvent(new Event(\"measurement-added\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * renderAllMeasurements:\r\n     *     Renders all measurements\r\n     */\r\n    renderAllMeasurements() {\r\n        let zoom = this.viewer.viewport.getZoom();\r\n        for (let i = 0; i < this.measurements.length; i++) {\r\n            this.measurements[i].p1.render(zoom);\r\n            this.measurements[i].p2.render(zoom);\r\n            this.measurements[i].render(zoom);\r\n        }\r\n        if (this.isMeasuring && this.p1 != null) {\r\n            this.p1.render(zoom);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * saveInLocalStorage:\r\n     *     Saves the measurements in localStorage in JSON format\r\n     */\r\n    saveInLocalStorage(imageIdentifier) {\r\n        this.db.saveAll(this.measurements,imageIdentifier);\r\n        localStorage.setItem(\"color\", this.measurementColor);\r\n    }\r\n\r\n    /**\r\n     * setMeasurementColor:\r\n     *     changes color of measurement markings, also when\r\n     *     mid-measurement, changes the color of the first marking\r\n     */\r\n    setMeasurementColor(color) {\r\n        this.measurementColor = color;\r\n        if (this.isMeasuring) {\r\n            // have to re-color the marking already placed\r\n            this.p1.color = this.measurementColor;\r\n            this.p1.fabricObject.fill = this.measurementColor;\r\n            this.fabricCanvas.renderAll();\r\n        }\r\n        this.saveInLocalStorage(this.imageIdentifier);\r\n    }\r\n\r\n    /**\r\n     * undo:\r\n     *     Undose the last action - if mid-measurement, the first\r\n     *     point is erased and the user will have to start over.\r\n     *     Otherwise, the last created measurement is erased.\r\n     */\r\n    async undo() {\r\n        if (this.isMeasuring) { // we have a point\r\n            // store the point for redo\r\n            this.redoStack.push(this.p1);\r\n            this.p1.remove();\r\n            this.p1 = null;\r\n            this.isMeasuring = !this.isMeasuring;\r\n        }\r\n        else if (this.measurements.length > 0) { // we have a whole measurement\r\n            // pop out of measurements and into redoStack\r\n            let measurement = this.measurements.pop()\r\n            measurement.remove();\r\n            this.redoStack.push(measurement);\r\n            await this.db.removeMeasurement(measurement);\r\n            this.saveInLocalStorage(this.imageIdentifier);\r\n            document.dispatchEvent(new Event(\"measurement-removed\"));\r\n        }\r\n\r\n    }\r\n}\r\n/**\r\n * Measurement.js\r\n * Object model to represent a measurement between two points\r\n * By Nicholas Verrochi and Vidhya Sree N\r\n * For CS410 - The Axolotl Project\r\n */\r\n\r\nclass Measurement {\r\n\r\n    id; // used to track in the database - set externally\r\n    p1; // starting point of the measurement in **image** coordinates\r\n    p2; // ending point of the measurement in image coordinates\r\n    name; // name given to the measurement\r\n    color; // color used to render the measurement\r\n    distance; // distance in pixels\r\n    conversionFactor; // factor to convert from px -> chosen units (distance in px * conversion factor = converted distance)\r\n    units; // string to represent the units, for example \"px\" for pixels\r\n    imageIdentifier;\r\n\r\n    /**\r\n     * fabric.js objects\r\n     */\r\n    fabricCanvas; // the canvas on which to render the fabric.js objects\r\n    line; // line between the two points\r\n    textObject; // text displaying the distance\r\n\r\n    /**\r\n     * constructor\r\n     *\r\n     * Stores points, name, color, and conversion factor and units\r\n     * Instantiates a fabric Group to store the relevant objects to render\r\n     *\r\n     * @param {Point} p1\r\n     * @param {Point} p2\r\n     * @param {string} name\r\n     * @param {string} color\r\n     * @param {float} conversionFactor\r\n     * @param {string} units\r\n     * @param {fabric.Canvas} fabricCanvas\r\n     */\r\n    constructor(p1, p2, name, color, conversionFactor, units, fabricCanvas,imageIdentifier) {\r\n        this.p1 = p1;\r\n        this.p2 = p2;\r\n        this.name = name;\r\n        this.color = color;\r\n        this.distance = Math.sqrt(Math.pow(this.p2.x - this.p1.x, 2) + Math.pow(this.p2.y - this.p1.y, 2));\r\n        this.conversionFactor = conversionFactor; // pixels * conversionFactor = actual measurement\r\n        this.units = units;\r\n        // convert to proper units\r\n        this.distance *= conversionFactor;\r\n        this.fabricCanvas = fabricCanvas;\r\n        this.imageIdentifier = imageIdentifier\r\n    }\r\n\r\n    /**\r\n     * adjustToZoom:\r\n     *\r\n     * Adjusts the fabric objects to the zoom level of the viewer\r\n     *\r\n     * @param {float} zoom: zoom ratio to adjust to\r\n     */\r\n    adjustToZoom(zoom) {\r\n        this.p1.adjustToZoom(zoom);\r\n        this.p2.adjustToZoom(zoom);\r\n        this.line.strokeWidth = 50 / zoom;\r\n        this.textObject.fontSize = 300 / zoom;\r\n        // adjust distance between right-most point and text\r\n        this.textObject.left = Math.max(this.p1.x, this.p2.x) + 100 / zoom;\r\n    }\r\n\r\n    /**\r\n     * remove:\r\n     *\r\n     * Removes the fabric group from the canvas\r\n     */\r\n    remove() {\r\n        this.p1.remove();\r\n        this.p2.remove();\r\n        this.fabricCanvas.remove(this.line);\r\n        this.fabricCanvas.remove(this.textObject);\r\n    }\r\n\r\n    /**\r\n     * render:\r\n     *\r\n     * Adds the points, line, and length text to the canvas\r\n     *\r\n     * @param {float} zoom: zoom ratio of the viewer\r\n     */\r\n    render(zoom) {\r\n        // draw line between p1 and p2\r\n        this.line = new fabric.Line([this.p1.x, this.p1.y, this.p2.x, this.p2.y], {\r\n            originX: 'center',\r\n            originY: 'center',\r\n            stroke: this.color,\r\n            strokeWidth: 50 / zoom\r\n        });\r\n        this.fabricCanvas.add(this.line);\r\n\r\n        // create text object to display measurement\r\n        let text = (this.distance).toFixed(3) + \" \" + this.units;\r\n        this.textObject = new fabric.Text(text, {\r\n            left: Math.max(this.p1.x, this.p2.x) + 100 / zoom,\r\n            top: this.p1.x > this.p2.x ? this.p1.y : this.p2.y,\r\n            fontSize: 300 / zoom,\r\n            fill: this.color\r\n        });\r\n        this.fabricCanvas.add(this.textObject);\r\n    }\r\n}\r\n\r\n/**\r\n * Point.js\r\n * Object model to represent a point (part of a measurement)\r\n * By Nicholas Verrochi and Vidhya Sree N\r\n * For CS410 - The Axolotl Project\r\n */\r\n\r\nclass Point {\r\n\r\n    x; // x-coordinate in **image** coordinates\r\n    y; // y-coordinate in **image** coordinates\r\n    color; // color to render in\r\n\r\n    /**\r\n     * fabric.js objects\r\n     */\r\n    fabricCanvas; // canvas which holds the point\r\n    fabricObject; // the circle marking the point\r\n    imageIdentifier;\r\n\r\n    /**\r\n     * constructor\r\n     *\r\n     * Creates a point that can be rendered on the canvas\r\n     *\r\n     * @param {int} x\r\n     * @param {int} y\r\n     * @param {string} color\r\n     * @param {fabricCanvas} fabricCanvas\r\n     */\r\n    constructor(x, y, color, fabricCanvas,imageIdentifier) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.color = color;\r\n        this.fabricCanvas = fabricCanvas;\r\n        this.imageIdentifier = imageIdentifier;\r\n\r\n        // create the fabric.js object for rendering\r\n        this.fabricObject = new fabric.Circle({\r\n            originX: 'center',\r\n            originY: 'center',\r\n            left: this.x,\r\n            top: this.y,\r\n            fill: this.color,\r\n            radius: 150\r\n        });\r\n    }\r\n\r\n    /**\r\n     * adjustToZoom:\r\n     *\r\n     * Adjusts size of the circle based on zoom level\r\n     *\r\n     * @param {float} zoom: zoom ratio to adjust to\r\n     */\r\n    adjustToZoom(zoom) {\r\n        this.fabricObject.setRadius(150 / (zoom * 1.5));\r\n    }\r\n\r\n    /**\r\n     * remove:\r\n     *\r\n     * Removes the circle from the canvas\r\n     */\r\n    remove() {\r\n        this.fabricCanvas.remove(this.fabricObject);\r\n    }\r\n\r\n    /**\r\n     * render:\r\n     *\r\n     * Adds the circle to the canvas\r\n     *\r\n     * @param {float} zoom: zoom ratio\r\n     */\r\n    render(zoom) {\r\n        this.adjustToZoom(zoom); // needs to be called first for some silly reason\r\n        this.fabricCanvas.add(this.fabricObject);\r\n    }\r\n}\r\n\r\n/**\r\n * ButtonBar.js\r\n *\r\n * Creates a row of buttons for the menu\r\n *\r\n * By Nicholas Verrochi and Vidhya Sree N\r\n */\r\n\r\nclass ButtonBar {\r\n\r\n    plugin; // access to the OSDMeasure plugin\r\n\r\n    /**\r\n     * HTML elements\r\n     */\r\n    element; // container for all buttons\r\n    undoButton; // undo button\r\n    redoButton; // redo button\r\n    resetButton; // reset button\r\n    exportButton; // allows for exporting measurement data to csv\r\n\r\n    /**\r\n     * constructor\r\n     *\r\n     * Creates the button bar and sets up handlers\r\n     *\r\n     * @param {OSDMeasure} plugin: reference to the plugin\r\n     */\r\n\r\n    constructor(plugin) {\r\n        this.plugin = plugin;\r\n        this.element = document.createElement(\"div\");\r\n\r\n        this.undoButton = document.createElement(\"input\");\r\n        this.undoButton.setAttribute(\"type\", \"button\");\r\n        this.undoButton.setAttribute(\"value\", \"undo (ctrl + z)\");\r\n        this.setButtonStyle(this.undoButton);\r\n        this.undoButton.addEventListener(\"click\", () => {\r\n            this.plugin.undo();\r\n        });\r\n        this.element.appendChild(this.undoButton);\r\n\r\n        this.redoButton = document.createElement(\"input\");\r\n        this.redoButton.setAttribute(\"type\", \"button\");\r\n        this.redoButton.setAttribute(\"value\", \"redo (ctrl + y)\");\r\n        this.setButtonStyle(this.redoButton);\r\n        this.redoButton.addEventListener(\"click\", () => {\r\n            this.plugin.redo();\r\n        });\r\n        this.element.appendChild(this.redoButton);\r\n\r\n        this.resetButton = document.createElement(\"input\");\r\n        this.resetButton.setAttribute(\"type\", \"button\");\r\n        this.resetButton.setAttribute(\"value\", \"reset (ctrl + r)\")\r\n        this.setButtonStyle(this.resetButton);\r\n        this.resetButton.addEventListener(\"click\", () => {\r\n            if (window.confirm(\"Are you sure you want to reset all measurements and annotations?\")) {\r\n                this.plugin.clear();\r\n            }\r\n        });\r\n        this.element.appendChild(this.resetButton);\r\n\r\n        this.exportButton = document.createElement(\"input\");\r\n        this.exportButton.setAttribute(\"type\", \"button\");\r\n        this.exportButton.setAttribute(\"value\", \"export csv (ctrl + s)\")\r\n        this.setButtonStyle(this.exportButton);\r\n        this.exportButton.addEventListener(\"click\", () => {\r\n            this.plugin.exportCSV();\r\n        });\r\n        this.element.appendChild(this.exportButton);\r\n    }\r\n\r\n    /**\r\n     * setButtonStyle:\r\n     *\r\n     * Styles an individual button\r\n     *\r\n     * @param {HMTLInputElement} button: button to style\r\n     */\r\n    setButtonStyle(button) {\r\n        let style = button.style;\r\n        style.setProperty(\"color\", \"white\");\r\n        style.setProperty(\"background-color\", \"black\");\r\n        style.setProperty(\"width\", \"100%\");\r\n        style.setProperty(\"height\", \"25px\");\r\n    }\r\n}\r\n\r\n/**\r\n * MeasurementList.js\r\n *\r\n * Encapsulates the dynamic measurement list in the menu\r\n *\r\n * By Nicholas Verrochi and Vidhya Sree N\r\n */\r\n\r\nclass MeasurementList {\r\n\r\n    plugin; // reference to the OSDMeasure plugin\r\n\r\n    /**\r\n     * HTML elements\r\n     */\r\n    element; // UL element to hold the entire list\r\n    listItems = []; // list of li items, one per measurement of type MeasurementListItem\r\n\r\n    /**\r\n     * constructor:\r\n     *\r\n     * Creates an empty measurement list\r\n     *\r\n     * @param {OSDMeasure} plugin: reference to access the plugin\r\n     */\r\n    constructor(plugin) {\r\n        this.plugin = plugin;\r\n        this.element = document.createElement(\"ul\");\r\n        this.element.style.setProperty(\"list-style\", \"none\");\r\n\r\n        // add new list item when measurement added\r\n        document.addEventListener(\"measurement-added\", this.addLatestMeasurement.bind(this));\r\n        document.addEventListener(\"measurement-removed\", this.removeLatestMeasurement.bind(this));\r\n        document.addEventListener(\"measurements-reset\", this.resetMeasurements.bind(this));\r\n        document.addEventListener(\"data-loaded\", this.addAllMeasurements.bind(this));\r\n    }\r\n\r\n    /**\r\n     * addAllMeasurements:\r\n     *\r\n     * Adds all measurements to the list\r\n     */\r\n    addAllMeasurements() {\r\n        for (let i = 0; i < this.plugin.measurements.length; i++) {\r\n            let measurement = this.plugin.measurements[i];\r\n            let listItem = new MeasurementListItem(this.plugin, measurement);\r\n            this.listItems.push(listItem);\r\n            this.element.appendChild(listItem.element);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * addLatestMeasurement:\r\n     *\r\n     * Creates a new list item for the most recently added measurement and adds it to the list\r\n     */\r\n    addLatestMeasurement() {\r\n        let measurement = this.plugin.measurements[this.plugin.measurements.length - 1];\r\n        let listItem = new MeasurementListItem(this.plugin, measurement);\r\n        this.listItems.push(listItem);\r\n        this.element.appendChild(listItem.element);\r\n    }\r\n\r\n    /**\r\n     * addToDocument:\r\n     *\r\n     * Adds the entire list to the DOM tree\r\n     * Also sets it up to work in fullscreen mode\r\n     */\r\n    addToDocument() {\r\n        document.appendChild(this.element);\r\n        this.plugin.viewer.element.appendChild(this.element);\r\n    }\r\n\r\n    /**\r\n     * removeLatestMeasurement:\r\n     *\r\n     * Removes the latest measurement from the list upon undo\r\n     */\r\n    removeLatestMeasurement() {\r\n        this.element.removeChild(this.listItems.pop().element);\r\n    }\r\n\r\n    /**\r\n     * resetMeasurements:\r\n     *\r\n     * Clears the list when the user resets all measurements\r\n     */\r\n    resetMeasurements() {\r\n        for(let i = 0; i < this.listItems.length; i++) {\r\n            this.element.removeChild(this.listItems[i].element);\r\n        }\r\n        this.listItems = [];\r\n    }\r\n}\r\n\r\n/**\r\n * MeasurementListItem.js\r\n *\r\n * Encapsulates a single item on the measurement list\r\n *\r\n * By Nicholas Verrochi and Vidhya Sree N\r\n */\r\n\r\nclass MeasurementListItem {\r\n\r\n    plugin; // reference to the OSDMeasure plugin\r\n    measurement; // reference to the measurement's object representation\r\n\r\n    /**\r\n     * HTML elements\r\n     */\r\n    element; // li element that holds the list item\r\n    nameField; // text input that holds the measurement name\r\n    lengthDisplay; // displays the length of the measurement\r\n\r\n    /**\r\n     * constructor:\r\n     *\r\n     * @param {OSDMeasure} plugin: reference for access to the plugin\r\n     * @param {Measurement} measurement: measurement object to represent\r\n     */\r\n    constructor(plugin, measurement) {\r\n        this.plugin = plugin;\r\n        this.measurement = measurement;\r\n\r\n        this.element = document.createElement(\"li\");\r\n\r\n        this.nameField = document.createElement(\"input\");\r\n        this.nameField.setAttribute(\"type\", \"text\");\r\n        this.nameField.value = this.measurement.name;\r\n        this.nameField.addEventListener(\"input\", this.updateName.bind(this));\r\n        this.setNameFieldStyle();\r\n        this.element.appendChild(this.nameField);\r\n\r\n        this.lengthDisplay = document.createElement(\"span\");\r\n        this.lengthDisplay.innerText = `: ${(this.measurement.distance).toFixed(3)} ${this.measurement.units}`;\r\n        this.element.appendChild(this.lengthDisplay);\r\n    }\r\n\r\n    /**\r\n     * setNameFieldStyle:\r\n     *\r\n     * Sets up the style of the name input field\r\n     */\r\n    setNameFieldStyle() {\r\n        let style = this.nameField.style;\r\n        style.setProperty(\"background\", \"transparent\");\r\n        style.setProperty(\"border\", \"none\");\r\n        style.setProperty(\"color\", \"white\");\r\n        style.setProperty(\"text-align\", \"right\");\r\n        style.setProperty(\"width\", \"50%\");\r\n    }\r\n\r\n    /**\r\n     * updateName:\r\n     *\r\n     * Changes name to reflect the user's choice\r\n     */\r\n    updateName() {\r\n        this.measurement.name = this.nameField.value;\r\n        this.plugin.saveInLocalStorage();\r\n    }\r\n}\r\n\r\n/**\r\n * Menu.js\r\n *\r\n * Class to represent the measurement menu\r\n *\r\n * By Nicholas Verrochi and Vidhya Sree N\r\n */\r\n\r\nclass Menu {\r\n\r\n    plugin; // reference to the OSDMeasure plugin\r\n\r\n    /**\r\n     * HTML elements\r\n     */\r\n    element; // holds the entire menu\r\n    colorSelector; // color input to select measurement color\r\n    measurementList; // dynamically displays measurements added\r\n    buttonBar; // div which holds buttons for operations like undo, etc\r\n\r\n    /**\r\n     * constructor\r\n     *\r\n     * Programatically constructs a menu\r\n     *\r\n     * @param {OSDMeasure} plugin: reference to interact with the plugin\r\n     */\r\n    constructor(plugin) {\r\n        this.plugin = plugin;\r\n\r\n        // create menu container\r\n        this.element = document.createElement(\"div\");\r\n        this.element.setAttribute(\"hidden\", \"hidden\"); // start hidden until user opens\r\n        this.setMenuStyle();\r\n\r\n        // create color selector\r\n        this.colorSelector = document.createElement(\"input\");\r\n        this.colorSelector.setAttribute(\"type\", \"color\");\r\n        // handler for changing color\r\n        this.colorSelector.addEventListener(\"change\", this.handleColorChange.bind(this), false);\r\n        this.setColorSelectorStyle();\r\n        this.element.appendChild(this.colorSelector);\r\n\r\n        // create measurement list\r\n        this.measurementList = new MeasurementList(this.plugin);\r\n        this.element.appendChild(this.measurementList.element);\r\n\r\n        // create button bar\r\n        this.buttonBar = new ButtonBar(this.plugin);\r\n        this.element.appendChild(this.buttonBar.element);\r\n\r\n        // set starting color after data loaded (color maintained upon restarting)\r\n        document.addEventListener(\"data-loaded\", this.updateColor.bind(this));\r\n    }\r\n\r\n    /**\r\n     * addToDocument:\r\n     *\r\n     * Adds the menu to the DOM tree\r\n     */\r\n    addToDocument() {\r\n        document.body.appendChild(this.element);\r\n        // append to the viewer's element so menu will stay visible in fullscreen\r\n        this.plugin.viewer.element.appendChild(this.element);\r\n    }\r\n\r\n    /**\r\n     * handleColorChange:\r\n     *\r\n     * Handles change in color from the color selector\r\n     */\r\n    handleColorChange() {\r\n        let color = this.colorSelector.value;\r\n        this.plugin.setMeasurementColor(color);\r\n    }\r\n\r\n    /**\r\n     * setColorSelectorStyle:\r\n     *\r\n     * Sets the style of the color selector\r\n     */\r\n    setColorSelectorStyle() {\r\n        let style = this.colorSelector.style;\r\n        style.setProperty(\"width\", \"100%\");\r\n        style.setProperty(\"height\", \"30px\");\r\n        style.setProperty(\"border\", \"none\");\r\n        style.setProperty(\"padding\", \"0px\");\r\n    }\r\n\r\n    /**\r\n     * setMenuStyle:\r\n     *\r\n     * sets the style of the menu container\r\n     */\r\n    setMenuStyle() {\r\n        let style = this.element.style;\r\n        // positioning\r\n        style.setProperty(\"position\", \"absolute\");\r\n        style.setProperty(\"text-align\", \"left\");\r\n        style.setProperty(\"top\", \"10%\");\r\n        style.setProperty(\"right\", \"0%\");\r\n        style.setProperty(\"z-index\", \"2\");\r\n        // sizing\r\n        style.setProperty(\"width\", \"20%\");\r\n        style.setProperty(\"padding\", \"1%\");\r\n        // coloring and opacity\r\n        style.setProperty(\"background\", \"rgba(0, 0, 0, 0.75)\");\r\n        style.setProperty(\"color\", \"white\"); // text color\r\n    }\r\n\r\n    /**\r\n     * updateColor:\r\n     *\r\n     * Callback that sets the color swatch properly after loading\r\n     * Needed because color selection saved between sessions\r\n     */\r\n    updateColor() {\r\n        let color = this.plugin.measurementColor;\r\n        this.colorSelector.value = color;\r\n        this.plugin.setMeasurementColor(color);\r\n    }\r\n}\r\n/**\r\n * MenuBar.js\r\n *\r\n * Encapsulates the menu icon\r\n *\r\n * By Nicholas Verrochi and Vidhya Sree N\r\n */\r\n\r\nclass MenuButton {\r\n\r\n    plugin; // reference to the OSDMeasure plugin\r\n\r\n    /**\r\n     * HTML elements\r\n     */\r\n    element; // img element that holds the menu icon\r\n\r\n    /**\r\n     * constructor:\r\n     *\r\n     * Encapsulates the menu icon using HTMLElement objects\r\n     * Sets up callbacks to open the menu on click\r\n     * Adds the menu icon to the DOM tree\r\n     *\r\n     * @param {OSDMeasure} plugin: reference used to interact with the plugin\r\n     */\r\n    constructor(plugin) {\r\n        this.plugin = plugin;\r\n        this.element = document.createElement(\"img\");\r\n        this.element.setAttribute(\"tabindex\", \"0\"); // allow tabbing\r\n        this.element.setAttribute(\"src\", \"img/hamburger-50.png\")\r\n        this.setupStyle();\r\n    }\r\n\r\n    /**\r\n     * addToDocument:\r\n     *\r\n     * Adds the menu icon to the document\r\n     * Appends elements as children to the viewer - this allows the menu to appear while in fullscreen mode\r\n     */\r\n    addToDocument() {\r\n        document.body.appendChild(this.element);\r\n        // appending to viewer so icon displays in fullscreen mode\r\n        this.plugin.viewer.element.appendChild(this.element);\r\n    }\r\n\r\n    /**\r\n     * setupIconStyle:\r\n     *\r\n     * Sets up the CSS styling for the menu icon (not the dots within)\r\n     */\r\n    setupStyle() {\r\n        let style = this.element.style;\r\n        // need to set background color for visibility\r\n        style.setProperty(\"background-color\", \"white\");\r\n        // positioning - set in top right\r\n        style.setProperty(\"position\", \"absolute\");\r\n        style.setProperty(\"top\", \"0%\");\r\n        style.setProperty(\"right\", \"0%\");\r\n        style.setProperty(\"z-index\", \"1\");\r\n        // pointer cursor so the user knows they can click\r\n        style.setProperty(\"cursor\", \"pointer\");\r\n    }\r\n}\r\n/**\r\n * UI.js\r\n *\r\n * Generates a basic UI for the OSDMeasure plugin\r\n * This gets generated on the document and alters\r\n * some of the css for the document\r\n *\r\n * By Nicholas Verrochi and Vidhya Sree N\r\n */\r\n\r\nclass UI {\r\n\r\n    plugin; // access to the OSDMeasure plugin\r\n\r\n    /**\r\n     * HTML elements\r\n     */\r\n    menuButton; // traditional (three dots) menu icon\r\n    menu; // the measurement menu itself\r\n\r\n    /**\r\n     * constructor:\r\n     *\r\n     * Sets up inner HTML elements and their style\r\n     * Sets up event callbacks for UI elements\r\n     * Doesn't add anything to the document! This has a separate function\r\n     *\r\n     * @param {OSDMeasure} plugin: reference to interact with the plugin\r\n     */\r\n    constructor(plugin, options = {}) {\r\n        this.plugin = plugin\r\n        this.setBodyStyle();\r\n\r\n        // setup menu and icon\r\n        this.menuButton = new MenuButton(plugin, options);\r\n        this.menu = new Menu(plugin, options);\r\n\r\n        // wire menu to open when icon clicked\r\n        this.menuButton.element.addEventListener(\"click\", this.toggleMenu.bind(this));\r\n    }\r\n\r\n    /**\r\n     * addToDocument:\r\n     *\r\n     * Adds the entire UI to the document - call this after instantiating to display\r\n     */\r\n    addToDocument() {\r\n        this.menuButton.addToDocument();\r\n        this.menu.addToDocument();\r\n    }\r\n\r\n    /**\r\n     * toggleMenu:\r\n     *\r\n     * Toggles the menu visibility\r\n     */\r\n    toggleMenu() {\r\n        if (this.menu.element.getAttribute(\"hidden\") == \"hidden\") {\r\n            this.menu.element.removeAttribute(\"hidden\");\r\n        }\r\n        else {\r\n            this.menu.element.setAttribute(\"hidden\", \"hidden\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * setBodyStyle:\r\n     *\r\n     * Sets style for the document to setup background color and stop overflow\r\n     */\r\n    setBodyStyle() {\r\n        let style = document.body.style;\r\n        style.setProperty(\"overflow\", \"hidden\", \"important\");\r\n        style.setProperty(\"background-color\", \"black\");\r\n        style.setProperty(\"font-size\", \"0.9em\");\r\n    }\r\n}"],"names":[],"version":3,"file":"OSDMeasurePlugin.min.js.map"}